flask有两个主要依赖：路由、调试和WSGIz
在flask中有两种上下文：程序上下文和请求上下文。所有的上下文都必须在激活之后才能使用。

@question
flask中的路由是通过python装饰器实现的，bottle中的路是如何实现的，有和不同?

@question
flask中的路由是讲URL和view function对应起来，收到不同的URL调用不同的view function
用装饰器把函数注册为事件的处理程序，这是一种常见手法。具体是如何实现的?bottle中是否也用了此手法?

current_app:程序上下文。当前激活程序的程序实例
g: 程序上下文。处理请求时用作临时存储的对象。每次请求都会重设这个变量
request: 请求上下文。请求对象，封装了客户端发出的HTTP请求中的内容
session: 请求上下文。用户会话，用于存储请求之间需要记住的值的词典

@question
上下文就是全局变量，但是与全局变量不同的是，有的上下文是整个程序的全局变量，即程序上下文；有的上下文是线程内的全局变量，如
request请求上下文；有的是请求见可见的全局变量，如session请求上下文。
上下文的好处：如果想让可多的方法都能访问一个变量。一种方法是将该变量作为参数传递给函数；另一种方法是把该变量作为全局变量供很多方法访问。
上下文是后者，这种方式更有效，更灵活。
问题是，这种上下文是如何通过什么方式实现的? 对象，类方法?

@question
上下文需要激活才能使用，为什么要激活的过程?激活实质上是做了什么事情?

@question
Flask四种请求钩子的实现
before_first_request :注册一个函数,在处理第一个请求之前运行
before_request :注册一个函数,在每次请求之前运行
after_request :注册一个函数,如果没有未处理的异常抛出,在每次请求之后运行
teardown_request :注册一个函数,即使有未处理的异常抛出,也在每次请求之后运行

Flask扩展的一种方法：一个例子
from flask.ext.script import Manager
app = Flask(__name__)
...
manager = Manager(app)
if __name__ == '__main__':
    manager.run()
这个扩展的初始化方法也适用于其他很多扩展:把程序实例作为参数传给构造函数,初始化主类的实例。







